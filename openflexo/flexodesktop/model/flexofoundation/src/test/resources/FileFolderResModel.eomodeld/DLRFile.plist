{
    attributes = (
        {columnName = FILESTATUS; name = status; prototypeName = str10; }, 
        {
            allowsNull = N; 
            columnName = CREATIONDATE; 
            name = creationDate; 
            prototypeName = date; 
        }, 
        {
            allowsNull = N; 
            columnName = CREATORLOGIN; 
            name = creator; 
            prototypeName = str100; 
        }, 
        {columnName = DESCRIPTION; name = description; prototypeName = str2000; }, 
        {columnName = EXTENSION; name = extension; prototypeName = str10; }, 
        {allowsNull = N; columnName = FILEID; name = fileID; prototypeName = id; }, 
        {columnName = FILESIZE; name = fileSize; prototypeName = int; }, 
        {
            allowsNull = N; 
            columnName = FILEPATH; 
            name = filepath; 
            prototypeName = str200; 
        }, 
        {allowsNull = N; columnName = FOLDERID; name = folderID; prototypeName = id; }, 
        {allowsNull = N; columnName = NAME; name = name; prototypeName = str200; }
    ); 
    className = DLRFile; 
    classProperties = (
        fileID, 
        folderID, 
        folder, 
        name, 
        extension, 
        creationDate, 
        creator, 
        description, 
        filepath, 
        fileSize, 
        status
    ); 
    externalName = DLRFile; 
    fetchSpecificationDictionary = {}; 
    internalInfo = {"_clientClassPropertyNames" = (); }; 
    name = DLRFile; 
    primaryKeyAttributes = (fileID); 
    relationships = (
        {
            destination = DLRFolder; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = folderID; sourceAttribute = folderID; }); 
            name = folder; 
        }
    ); 
}
