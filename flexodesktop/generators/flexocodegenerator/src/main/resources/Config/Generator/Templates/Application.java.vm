import java.io.InputStream;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;

import be.denali.core.utils.HelpPopupDescriptor;
import be.denali.core.utils.WDLEditingContext;
import be.denali.core.utils.WDLLog;
import be.denali.core.utils.WDLToolBox;
import be.denali.core.woapp.WDLApplication;
import be.denali.domainkeyvalue.DLDomainKeyValueServiceInterface;
import be.denali.service.DLServiceManager;
import be.denali.user.DenaliUserServiceInterface;
import be.denali.resource.user.DLUserInterface;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOApplication;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOMessage;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WORequestHandler;
import com.webobjects.appserver.WOResponse;
import com.webobjects.appserver.WOSession;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSData;
import com.webobjects.foundation.NSLog;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;
import com.webobjects.eocontrol.EOEditingContext;

/**
 * Application class Generated by Flexo.
 * 
 * @author OpenFlexo Generator, Agile Birds sprl. (see www.OpenFlexo.com)
 */
 
public class Application extends WDLApplication {
#if($generator.isPrototype() && !$repository.includeReader())    
    private Hashtable<String,Element> _helpTable;
    private Hashtable<String,HelpPopupDescriptor> _helpDescriptors;
    
#end
    public static void main(String argv[]) {
        WOApplication.main(argv, Application.class);
    }

    public Application() {
        super();
        NSLog.out.appendln("Welcome to " + this.name() + " !");
        /* ** put your initialization code in here ** */
        //setting Locale to English to avoid random behaviour when deploying on different servers
        //An non-English Locale may cause invalid date format error for dates build from WDLDateAssistantPopup
        Locale.setDefault(Locale.ENGLISH);
        //The user service is part of the application and so it is not initialized with NSPrincipalClass mecanism.
        //that's why we need to initialize it here.
        getUserService();
		setIncludeCommentsInResponses(true);
#if($generator.isPrototype())
        #if(!$repository.includeReader())
        initHelpOnline();
        #end
#end
#if($repository.includeReader())
        registerRequestHandler(new ReaderResourceRequestHandler(), ReaderResourceRequestHandler.KEY);
#end
    }
    
    @Override
    public void initServices()
    {
    	super.initServices();
    	
    	//Init DKV
    	WDLEditingContext ec = new WDLEditingContext();
        try
        {
        	ec.lock();
        	initKeyValues(${generator.getPrefix()}Util.getDKVService(), ec);
        }
        finally
        {
        	ec.unlock();
        	ec.dispose();
        }
    }
    
    private String initKeyValues(DLDomainKeyValueServiceInterface dkvService, EOEditingContext ec) {
    	if(dkvService==null)return "Domain Key Value Service not available ! sorry...";
        dkvService.createTable(ec);
        StringBuffer sb = new StringBuffer();
		#foreach($domain in ${project.getDKVModel().getDomains()})
			#foreach($key in $domain.getKeys())
				#foreach($lg in ${project.getDKVModel().getLanguages()})
					#set( $v = $domain.getValue($key,$lg) )
        			initAndLogDKV(dkvService,sb,"${generator.escapeStringForJava($domain.getName())}","${generator.escapeStringForJava($key.getName())}", "$lg.getIsoCode()", #if(${v.getValue()})"${generator.escapeStringForJava($v.getValue())}"#else null#end, true, $key.getIndex(), ec);
            	#end
          	#end
        #end
        
        #if(!${project.getWorkflow().getRoleList().getRoles().isEmpty()})
            #set($list = ${generator.getNewVector()})
            #foreach( $role in $project.getRootFlexoProcess().getSortedRoles() )
                ${list.add(0, $role)}
            #end        
            #set($i = 1)
            #foreach($role in $list )
        		initAndLogDKV(dkvService,sb,"${generator.getPrefix()}Roles",${generator.getPrefix()}Constants.Role.ROLE_${generator.getJavaString(${role.getName()}).toUpperCase()}.toString(), "${project.getDKVModel().getMainLanguage().getIsoCode()}", "${generator.escapeStringForJava(${role.getName()})}", true, $i, ec);
				#set($i = $i + 1)
            #end
        #end
        
        return sb.toString();
    }
    
    private void initAndLogDKV(DLDomainKeyValueServiceInterface dkvService, StringBuffer sb, String domain, String key, String language, String value, boolean createIfNotExist, int index, EOEditingContext ec) {
        try {
            if(dkvService.initNewKeyValue(domain, key, language, value, createIfNotExist, index, ec))
            	sb.append(domain).append(".").append(key).append(".").append(language).append(" = ").append(value).append("(index: ").append(index).append(")<br/>");
        } catch (Exception e) {
            sb.append(e.getMessage() + "<br>");
        }    
    }
    
    public static DenaliUserServiceInterface getUserService() {
        try{
            return (DenaliUserServiceInterface)DLServiceManager.getInstance().getService(DenaliUserServiceInterface.SERVICE_KEY);
        }catch(Exception e){
            DenaliUserServiceInterface service = new ${project.getPrefix()}UserServiceImpl();
            DLServiceManager.getInstance().setService(service, DenaliUserServiceInterface.SERVICE_KEY);
            return service;
        }
    }

#if($generator.isPrototype())
    #if(!$repository.includeReader())
    private void initHelpOnline(){
        _helpDescriptors = new Hashtable<String, HelpPopupDescriptor>();
        _helpTable=new Hashtable<String,Element>();
        InputStream is = application().resourceManager().inputStreamForResourceNamed("help.properties", null, null);
        if(is!=null){
            try{
                Document helpDBDoc = WDLToolBox.parseXMLFile(is);
                Element root = helpDBDoc.getDocumentElement();
                _helpTable=new Hashtable<String,Element>();
                for(int i=0;i<root.getChildNodes().getLength();i++){
                    if(root.getChildNodes().item(i) instanceof Element){
                        Element e = (Element)root.getChildNodes().item(i);
                        String k = e.getAttribute("helpID");
                        _helpTable.put(k, e);
                        _helpDescriptors.put(k, new HelpPopupDescriptor(e));
                    }
                }
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        Enumeration<HelpPopupDescriptor> en = _helpDescriptors.elements();
        while(en.hasMoreElements()){
            en.nextElement().resolveLinks(_helpDescriptors);
        }
    }
    public HelpPopupDescriptor helpPopupDescriptorForKey(String key){
        return _helpDescriptors.get(key);
    }
    #end
#else
    
    @Override
    public boolean availableDirectActionsContainsAction(String className, String name, WOSession session) {
        //TODO: check permissions
        if ("DirectAction".equals(className) || "be.denali.core.woapp.WDLDirectAction".equals(className)) {
            return true;
        }
        if("${project.getPrefix()}DA".equals(className))
            return true;
       
           if(session!=null)
        {
            DLUserInterface user = ((Session)session).currentUser();
            if (user != null && user.isSuperAdmin()) return true;
        }
       
        if(session !=null && ((Session)session).invalidSessionMessageForContext(null)==null)
        {
        if("DLExceptionDA".equals(className)) //To get access to error pages
            return true;
            /*if("be.denali.core.woapp.WDLDirectAction".equals(className) && "nullPointerException".equals(name))
                return true;*/
            //If you want to allow user to download file
            /*if("DLJRDA".equals(className) && "download".equals(name))
                return true;*/
           
        }
       
      return false;
    }
#end
#if($repository.includeReader())
    /**
     * The request uri has the following format: <code>...woa/reader/&lt;RESOURCE_PATH&gt;<code>.
     * This allows the use of relative urls.
     * This request handler will get the resource from the uri, and generate a response with the content of the resource.
     * @author DenaliGenerator
     */
    public static class ReaderResourceRequestHandler extends WORequestHandler {
    private static Logger logger = WDLLog.getLogger(ReaderResourceRequestHandler.class);

    public static final String KEY = "reader";
    
    public static String urlForReaderResourceNamed(String framework, String resource, WOContext context) {
        if (framework!=null)
            if (logger.isLoggable(Level.WARNING))
                logger.warning("Cannot server reader resource from outside the application. Parameter framework='"+framework+"' will be ignored!");
        if (!resource.startsWith("reader/")) {
            if (logger.isLoggable(Level.SEVERE))
                logger.severe("Cannot build urls for something else than reader resource.");
            return null;
        }
        return context.request().adaptorPrefix()+"/"+WOApplication.application().name()+".woa"+"/"+ReaderResourceRequestHandler.KEY+"/"+resource;
    }
    
    /*
     * @see com.webobjects.appserver.WORequestHandler${sharp}handleRequest(com.webobjects.appserver.WORequest)
     */
    public WOResponse handleRequest(WORequest request) {
            String uri = request.uri();
            String resource = uri.substring(uri.indexOf(KEY) + KEY.length() + 1);

            int paramIndex = resource.indexOf("?");
            if (paramIndex != -1) {
                resource = resource.substring(0, paramIndex);
            }

            WOResponse response = new WOResponse();
            WOContext context = WOApplication.application().createContextForRequest(request);
            boolean hasSession = false;
            if (request.sessionID() != null) {
                try {
                    WOApplication.application().restoreSessionWithID(request.sessionID(), context);
                    hasSession = context.hasSession() && context.session() instanceof Session && ((Session)context.session()).currentUser()!=null;
                } finally {
                    WOApplication.application().saveSessionForContext(context);
                }
            }
            if (!hasSession) {
                if(getExceptionHandlingService()!=null) {
                    WOActionResults results = getExceptionHandlingService().sessionTimeOutResponse(null, context);
                    if (results !=null)
                        return results.generateResponse();
                }
                response.setStatus(WOMessage.HTTP_STATUS_FORBIDDEN);
                response.setContent("You must be logged in to see the flexo reader.");
                return response;
            }

            byte[] data = WOApplication.application().resourceManager().bytesForResourceNamed(resource, null, null);
            if (data != null) {
                response.setHeader(WOApplication.application().resourceManager().contentTypeForResourceNamed(resource), "Content-Type");
                response.setContent(new NSData(data));
                return response;
            } else {
                logger.info("Cannot find resource: " + resource);
                response.setStatus(WOMessage.HTTP_STATUS_NOT_FOUND); // not found
                return response;
            }
        }
    }
#end 
}