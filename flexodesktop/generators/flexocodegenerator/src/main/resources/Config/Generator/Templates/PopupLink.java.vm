#package()
import com.webobjects.foundation.*;
import com.webobjects.appserver.*;
import be.denali.core.woapp.*;
import be.denali.flexo.commons.hcwo.IFlexoComponent;
import java.util.logging.Level;
#imports($entity)

// This WOComponent popup has link been generated by Flexo.
// TODO: The developer has to check each "TODO", the communication between the popup and the link, and to implement the correct behaviors.
// TODO: add the bindings definition in the javadoc <br><b>binding</b>: ...

/**
 * $generator.getJavaDocString($componentDefinition.getDescription())
 * <br><b>binding</b>: confirmValue (or value) (String): The value submitted when the popup is confirmed.
 * <br><b>binding</b>: hiddenFieldName (String): The name of the field for the confirmValue. Usually, it is the form hiddenFieldName
 * <br><b>binding</b>: anchor (String): The name of the anchor of the opener page.
 * @author OpenFlexo Generator, Agile Birds sprl. (see www.OpenFlexo.com)
 * 
 */
public class ${componentDefinition.getName()}PopupLink extends WDLComponent implements IFlexoComponent {

    private static final java.util.logging.Logger logger = be.denali.core.utils.WDLLog.getLogger(${componentDefinition.getName()}PopupLink.class);

    private boolean isSubmitted = false;
    public Boolean displayPopupOnLoad = false;
    public Integer positionX = null;
    public Integer positionY = null;
    public Integer scrollX = null;
    public Integer scrollY = null;

    //==========================================================================
    //============================= Constructor ================================
    //==========================================================================

    public ${componentDefinition.getName()}PopupLink(WOContext context){
        super(context);
    }

    public boolean synchronizesVariablesWithBindings(){
        return false;
    }

    public void appendToResponse(WOResponse r, WOContext c){
        isSubmitted = false;
        super.appendToResponse(r,c);
        displayPopupOnLoad = false;
        positionX = null;
        positionY = null;
        scrollX = null;
        scrollY = null;
    }

    public void takeValuesFromRequest(WORequest r, WOContext c){
        super.takeValuesFromRequest(r,c);
    }

    //==========================================================================
    //============================= Instance methods ===========================
    //==========================================================================

    public WOActionResults openPopup() {
        String hiddenFieldName = (String)valueForBinding("hiddenFieldName");
        if(hiddenFieldName==null)
            hiddenFieldName = hiddenFieldName();
        String anchor = (String)valueForBinding("anchor"); 
        String css = (String)valueForBinding("page.css");
        return ${componentDefinition.getName()}Popup.createPage(context(), #callPopupCreatePageArguments() formName(), hiddenFieldName, confirmValue(), href(), anchor,css,this);
    }
    
    public String hiddenDivUniqueIdentifier()
    {
        return "${componentDefinition.getName()}Popup" + confirmValue() + (hasBinding("uniqueIdentifier")?valueForBinding("uniqueIdentifier"):"");
    }
    
    public String onClickPopupButton()
    {
        return WDLJSHiddenPopup.showPopupJSString(hiddenDivUniqueIdentifier());
    }

    public void setIsSubmitted(){
        isSubmitted = true;
    }
    
    public long getOperationComponentInstanceID() {
        return ((IFlexoComponent) page()).getOperationComponentInstanceID();
    }

    //==========================================================================
    //============================= Accessors ==================================
    //==========================================================================
    public Object width() {
        return (hasBinding("width")) ? valueForBinding("width") : Integer.valueOf(500);
    }
    
    public Object height() {
        return (hasBinding("height")) ? valueForBinding("height") : Integer.valueOf(400);
    }

    public String title() {
        return (hasBinding("title")) ? (String)valueForBinding("title") : "Open popup window";
    } 
    
    public Boolean includePopupInPage()
    {
        Boolean includePopupInPage = (Boolean)valueForBinding("includePopupInPage");
        return includePopupInPage!=null && includePopupInPage;
    }
    
    public String hiddenFieldValue()
    {
        return (String)valueForBinding("hiddenFieldValue");
    }
    
    public void setHiddenFieldValue(String value)
    {
        setValueForBinding(value, "hiddenFieldValue");
    }

    public String confirmValue()
    {
        return (String)valueForBinding("confirmValue");
    }
	
	public String href()
    {
        return (String)valueForBinding("href");
    }

    public String getPositionHiddenName()
    {
        return "positionHiddenName" + hiddenDivUniqueIdentifier();
    }
    
    public String getPositionHiddenValue() {
        return null;
    }

    public void setPositionHiddenValue(String value) {
        try {
            int indexOfWhiteSpace = value.indexOf(" ");
            scrollX = Integer.parseInt(value.substring(0, indexOfWhiteSpace));
            int indexOfWhiteSpace2 = value.indexOf(" ", indexOfWhiteSpace + 1);
            scrollY = Integer.parseInt(value.substring(indexOfWhiteSpace + 1, indexOfWhiteSpace2));
            indexOfWhiteSpace = value.indexOf(" ", indexOfWhiteSpace2 + 1);
            positionX = Integer.parseInt(value.substring(indexOfWhiteSpace2 + 1, indexOfWhiteSpace));
            positionY = Integer.parseInt(value.substring(indexOfWhiteSpace + 1));
        } catch (Exception e) {
            if (logger.isLoggable(Level.WARNING)) 
                logger.warning("Exception occured. Set level to FINE on logger named '" + logger.getName() + "' to see stacktrace.");
            if (logger.isLoggable(Level.FINE))
                logger.log(Level.FINE, "Exception occured: " + e.getMessage(), e);
        }
    }
    
    public String onSubmitScript()
    {
        StringBuilder script = new StringBuilder();
        script.append("var oldOnSubmit"+hiddenDivUniqueIdentifier()+" = document."+formName()+".onsubmit;");
        script.append("document."+formName()+".onsubmit = function() {");
        script.append("document."+formName()+"."+getPositionHiddenName()+".value = getScrollXY()[0] +' '+ getScrollXY()[1] + ' ' + findPosX(document.getElementById('"+hiddenDivUniqueIdentifier()+"')) +' '+ findPosY(document.getElementById('"+hiddenDivUniqueIdentifier()+"'));");
        script.append("if(oldOnSubmit"+hiddenDivUniqueIdentifier()+") oldOnSubmit"+hiddenDivUniqueIdentifier()+"();");
        script.append("};");
        return script.toString();
    }
    
    public String scrollIfNeededScript()
    {
        if(displayPopupOnLoad && scrollX!=null && scrollY!=null)
            return "window.scrollTo("+scrollX+", "+scrollY+");";
        return "";
    }

#foreach($bd in $componentDefinition.getBindingDefinitions())     
    #if(!${bd.getType().isEOEntity()} || !$generator.isPrototype())
    /**
    *
    * @return ${bd.getType().getBaseEntity().getEntityClassName()} Returns the value represented by the binding '${bd.getVariableName()}'
    */
    public ${bd.getType().getBaseEntity().getEntityClassName()} ${bd.getVariableName()}(){
        return (${bd.getType().getBaseEntity().getEntityClassName()})valueForBinding("${bd.getVariableName()}");
    }
    #if($bd.getIsSettable())
    /**
    * Sets value for binding '${bd.getVariableName()}'
    *
    * @param ${bd.getVariableName()} Value to set
    */
    public void set${generator.capitalize(${bd.getVariableName()})}(${bd.getType().getBaseEntity().getEntityClassName()} ${bd.getVariableName()}){
        if(isSubmitted || includePopupInPage()) {
            setValueForBinding(${bd.getVariableName()},"${bd.getVariableName()}");
        }
    }
        #end
    #end
#end

}
