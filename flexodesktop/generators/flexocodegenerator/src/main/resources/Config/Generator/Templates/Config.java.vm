import be.denali.config.defaultImpl.WDLConfig;
import be.denali.core.woapp.WDLApplication;

import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableDictionary;

#if(${projectGenerator.getWorkflowClassPackage()})
	import ${projectGenerator.getWorkflowClassPackage()}.*;
#end

/**
 * Config class Generated by OpenFlexo.
 * 
 * @author OpenFlexo Generator, Agile Birds sprl. (see www.OpenFlexo.com)
 */
 
public class ${PREFIX}Config extends WDLConfig
{

    public static final String ${PREFIX}_CONFIG_KEY = "${PREFIX}_CONFIG_KEY";

    public static final String DICTIONARY_KEY = "${PREFIX}";

    static {
        WDLConfig.setConfigForService(new ${PREFIX}Config(), ${PREFIX}_CONFIG_KEY);
    }

    public ${PREFIX}Config()
    {
        super();
    }

    public static ${PREFIX}Config getConfig()
    {
        return (${PREFIX}Config) WDLConfig.getConfigForService(${PREFIX}_CONFIG_KEY);
    }
    
    public String getServiceDomain()
    {
        return DICTIONARY_KEY;
    }

    public NSDictionary getDictionary()
    {
        return WDLApplication.getConfigService().getConfigDictionary(DICTIONARY_KEY);
    }

/*    public String afterLoginDA()
    {
        return (String) getSystemParameter("afterLoginDA", "${projectGenerator.getAfterLoginDA()}", true, true);
    }
*/
    #if($generator.isPrototype())
        public String loginProto()
        {
            return (String) getSystemParameter("login", "demo", true, false);
        }
    
        public String passwordProto()
        {
            return (String) getSystemParameter("password", "omed", true, false);
        }
		
		 public String getPrototypeSamplesFolderPath() {
            return (String) getSystemParameter("prototypeSamplesFolderPath", "/home/protosamples/" + Application.getWDLApplication().name().replaceAll("\\W", ""), true, false);
        }
    #end

    public String getDateFormat()
    {
        return (String) getSystemParameter("dateFormat", "${project.getProjectDateFormat().getJavaPattern()}", true, false);
    }
    
    public NSDictionary getAccessRightsDefinition()
    {
        return getNSDictionarySystemParameter("accessRightsDefinition", getAccessRightsDefinitionDefaultValue(), "Application access right", true, true);
    }
    
    public NSDictionary getAccessRightsDefinitionDefaultValue()
    {
        NSMutableDictionary accessRightsDefinitionDefaultValue = new NSMutableDictionary();
        
        #foreach($cd in $project.getAllInstanciatedOperationComponentDefinition())
            #foreach($ci in ${cd.getComponentInstances()})
                #set($role = ${ci.getOwner().getFather().getRole()})
                #if($role)
                accessRightsDefinitionDefaultValue.takeValueForKey(new NSArray(new Object[]{${PREFIX}Constants.Role.ROLE_${generator.getJavaString(${role.getName()}).toUpperCase()}.toString()}), "${cd.getName()}_${ci.getFlexoID()}");
                #else
                accessRightsDefinitionDefaultValue.takeValueForKey(new NSArray(), "${cd.getName()}_${ci.getFlexoID()}");
                #end
            #end
        #end
        
        return accessRightsDefinitionDefaultValue;
    }
}
