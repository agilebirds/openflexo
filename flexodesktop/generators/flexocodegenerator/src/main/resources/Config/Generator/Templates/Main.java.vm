import java.util.logging.Logger;

import be.denali.core.utils.WDLLog;
import be.denali.core.utils.WDLRedirect;
import be.denali.core.woapp.DLSession;
import be.denali.core.woapp.WDLApplication;
import be.denali.core.woapp.WDLComponent;
import be.denali.core.woapp.WDLDirectAction;
import be.denali.core.woapp.WDLSession;
import be.denali.language.DLLanguageInterface;
import be.denali.service.DLServiceManager;
import be.denali.service.DLServiceNotAvailableException;
import be.denali.user.DenaliUserServiceInterface;
import be.denali.user.InvalidPasswordException;
import be.denali.user.UnknowLoginException;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOApplication;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOResponse;
import com.webobjects.appserver.WOSession;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableDictionary;

/**
 * Login Page. Generated by Flexo.
 * 
 * @author OpenFlexo Generator, Agile Birds sprl. (see www.OpenFlexo.com)
 */
@SuppressWarnings("serial")
public class Main extends WDLComponent
{
        @SuppressWarnings("unused")
    private static Logger logger = WDLLog.getLoggerForFrameworkAndClass("$project.getProjectName()Prototype", Main.class);
    
    #if($generator.isPrototype() && !${project.getWorkflow().getRoleList().getRoles().isEmpty()})
        @single
            public NSArray rolesList = new NSArray(new Object[] { "ROLE_FULLACCESS"
            #foreach($role in $project.getRootFlexoProcess().getSortedRoles())
                , "ROLE_${generator.getJavaString(${role.getName()}).toUpperCase()}"
            #end
            });
        @end
        public String itemRole;
        public String selectedRole = "ROLE_FULLACCESS";
        public boolean useRole = false;
    #end

    public Main(WOContext context)
    {
        super(context);
    }

    public static Main createPage(WOContext c, String da, String errorMessage)
    {
        Main nextPage = (Main) WOApplication.application().pageWithName("Main", c);
        nextPage.setAfterLoginDA(da);
        if (errorMessage != null) {
            nextPage.errorMessage = errorMessage;
            nextPage.loginCorrect = false;
        }
        return nextPage;
    }

    /*
     * @see WDLComponent${sharp}appendToResponse(com.webobjects.appserver.WOResponse,
     *      com.webobjects.appserver.WOContext)
     */
    public void appendToResponse(WOResponse arg0, WOContext arg1)
    {
        if (hasValidSession())
            currentUserLogin = currentUser().login();
        super.appendToResponse(arg0, arg1);
    }

    /**
     * Returns the url of the login page.
     * 
     * @param pageDA the DA to use after login.
     * @param context the context of the request-response loop.
     * @return the url of the login page.
     */
    public static String getUrl(String pageDA, WOContext context)
    {
        NSMutableDictionary dic = new NSMutableDictionary();
        if (pageDA != null) dic.setObjectForKey(pageDA, "afterLoginDA");
        return context.directActionURLForActionNamed("DirectAction/loginPage", dic);
    }

    public static String getUrl(WOContext context)
    {
        return getUrl(null, context);
    }

    /**
     * Returns the login page.
     * 
     * @param directAction
     * @return the login page.
     */
    public static WOActionResults createPageForDirectAction(WDLDirectAction directAction)
    {
        String da = (String) directAction.request().formValueForKey("afterLoginDA");
        String error = (String) directAction.request().formValueForKey("errorMessage");
        return createPage(directAction.context(), da, error);
    }

    /**
     * Returns the url for the Form.
     * 
     * @return the Form url.
     */
    public String formHref()
    {
        return context().directActionURLForActionNamed("DirectAction/login", null);
    }
    
    private static DenaliUserServiceInterface getUserService()
            throws DLServiceNotAvailableException
    {
        return (DenaliUserServiceInterface) DLServiceManager.getInstance().getService(
                DenaliUserServiceInterface.SERVICE_KEY);
    }

    public void setAfterLoginDA(String value)  
    {
        afterLoginDA = value;
    }

    /**
     * @return true if a valid session already exists.
     * @see WDLSession${sharp}invalidSessionMessageForContext(com.webobjects.appserver.WOContext)
     */
    public boolean hasValidSession()
    {
        return hasSession()
                && ((WDLSession) session()).invalidSessionMessageForContext(context()) == null;
    }

    /**
     * Returns true if we have a next page to open.
     * 
     * @return true if we have a next page to open.
     */
    public boolean hasAfterLoginDA()
    {
        return afterLoginDA != null && !afterLoginDA.trim().equals("");
    }

    /**
     * Returns true if you want to allow cookies. The "automatic login" could
     * operate, in the default action.
     * 
     * @return true if you want to allow cookies.
     */
    public boolean allowCookie()
    {
        return false;
    }

    protected String afterLoginDA;

    protected boolean loginCorrect = true;

    protected String login;

    protected String password;

    protected String currentUserLogin;

    protected String errorMessage;

    protected String useCookie = "true";

    protected String restorePage = "true";
}
