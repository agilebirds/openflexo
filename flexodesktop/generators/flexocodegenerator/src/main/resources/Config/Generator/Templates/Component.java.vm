#**
* generator (CGGenerator): the component generator
* component (IEWOComponent): the component being currently generated
* project (FlexoProject): the current project
* 
* widgetStack (Stack): the Stack<IEWidget> of widgets
* repetitionStack (Stack): the Stack<RepetitionOperator> of repetition
* takeValuesFromRequest (StringBuilder): the code to add in the takeValuesFromRequest()
* appendToResponse (StringBuilder): the code to add in the appendToResponse()
* action (StringBuilder): the code to execute after the takeValuesFromRequest(i.e., in formAction or executeButton)
* listInstanciation (StringBuilder): the code to execute when instaciating a new list (beware of nested lists)
* validationDictionaries (Vector): a Vector<String> of all the validation dictionaries that are in this component.
* widgetNeedingConfirmMessage (Vector): a Vector<IEWidget> of all the widgets that need a localized confirm message
*#

#macro(pageDAParametersCall $_component)
@single
    #foreach($bd in $_component.getBindingDefinitions())
        #if($bd.getType().getBaseEntity().isDMEOEntity())
            #if($generator.isPrototype())
                , null
            #else
                , ${bd.getVariableName()}.__globalID()
            #end
        #else
            , #if(${bd.getProperty().hasAccessors()})${bd.getProperty().getGetterName()}()#else${bd.getVariableName()}#end
        #end
    #end
@end@
#end

#set($widget = $component.getRootSequence())
#set($widgetStack = $generator.getNewStack())
#set($repetitionStack = $generator.getNewStack())
#set($stack = $generator.getNewStack())
#set($validationDictionaries = $generator.getNewVector())
#set($registeredProperties = $generator.getNewVector())
#set($widgetNeedingConfirmMessage = $generator.getNewVector())
#set($buttons = $generator.getNewVector())
#set($takeValuesFromRequest = $generator.getNewStringBuilder())
#set($appendToResponse = $generator.getNewStringBuilder())
#set($formAction = $generator.getNewStringBuilder())
#set($listInstanciation = $generator.getNewStringBuilder())
#set($extension = "java")
#package()

import com.webobjects.foundation.*;
import com.webobjects.appserver.*;
import com.webobjects.eocontrol.*;
import com.webobjects.eoaccess.*;
import be.denali.core.woapp.*;
import be.denali.core.utils.*;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.*;

import be.denali.flexo.commons.hcwo.IFlexoComponent;
#if(!${generator.isPrototype()} && ${componentDefinition.isPage()})
import be.denali.dbbusinesslogic.BusinessLogicCoreDM;
import be.denali.dbbusinesslogic.BusinessLogicEntityDM;
import be.denali.dbbusinesslogic.BusinessLogicFactory;
#end
${projectGenerator.getProcessBusinessDataPackageImports()}
#if(${projectGenerator.getWorkflowClassPackage()})
	import ${projectGenerator.getWorkflowClassPackage()}.*;
	import ${projectGenerator.getWorkflowClassPackage()}.WorkflowProcess.WorkflowBusinessData;
#end
#if(${entity.getParentBaseEntity().getPackage().equals(${entity.getPackage()})})
import ${entity.getParentBaseEntity().getFullQualifiedName()};#end
#imports($entity)


/**
 * Component Class Generated by Flexo.
 * 
 * @author OpenFlexo Generator, Agile Birds sprl. (see www.OpenFlexo.com)
 */
 
 
// This tab WOComponent has been generated by Flexo.
// TODO: The developer has to check each "TODO" and implement the correct behaviors.
#set($woName = ${entity.getClassName()})
#if($componentDefinition.isPopup())
  #set($woName = "${woName}Popup")
#end
/**
 * #if(!$componentDefinition.getDontEscapeLatex())
 * $generator.getJavaDocString($componentDefinition.getDescription())
 #end*
 * <br><b>binding</b>: hiddenFieldName (String) - the name of the hiddenField to use for button hidden value submit
 #foreach($bd in $componentDefinition.getBindingDefinitions())
 * <br><b>binding</b>: $bd.getVariableName() ($bd.getType().getName()) - //TODO: add the binding description here
 #end
 * 
 * @author OpenFlexo Generator, Agile Birds sprl. (see www.OpenFlexo.com)
 */
@SuppressWarnings("serial")
public class $woName extends #if($entity.getParentBaseEntity())$entity.getParentBaseEntity().getName()#else${project.getPrefix()}Component#end implements IFlexoComponent {
    @SuppressWarnings("unused")
    private static final java.util.logging.Logger logger = be.denali.core.utils.WDLLog.getLogger(${woName}.class);
#if($componentDefinition.isOperation())
#set($componentInstances = ${generator.getNewVector()})
#void(${componentInstances.addAll(${componentDefinition.getComponentInstances()})})
#void($generator.sortVectorOfModelObject($componentInstances))

    public String pageDA;
    /**
     * The _componentInstanceID is an internal identifier to find the workflow context of the page.
     * NEVER CHANGE IT !!!!!!!!
     * VALID ids are :
#foreach($ci in $componentInstances)
#set($operationName ="${generator.getJavaString(${ci.getOperationNode().getName()})}")
     * $ci.getFlexoID() : $operationName (@see $project.getPrefix()Constants.#capNameForNode(${ci.getOperationNode().getProcess()}).#capNameForNode(${ci.getOperationNode().getAbstractActivityNode()})${sharp}#upNameForNode(${ci.getOperationNode()}))
#end
     **/ 
    private long _componentInstanceID;
    
    public long getOperationComponentInstanceID() {
        return _componentInstanceID;
    }
	
    public String getOperationURI() {
    #foreach($ci in $componentInstances)
        #if($foreach.index>0)else#end if(getOperationComponentInstanceID() == #componentInstance($ci))
        return #componentInstance($ci)_URI;
    #end
    #if($componentInstances.size()>0)else#end
        return null;
    }
	
    public boolean isDocGenerated() {
    #foreach($ci in $componentInstances)
        #if($foreach.index>0)else#end if(getOperationComponentInstanceID() == #componentInstance($ci))
        return #componentInstance($ci)_ISDOCGENERATED;
    #end
    #if($componentDefinition.getComponentInstances().size()>0)else#end
        return false;
    }
    
#elseif($componentDefinition.isPopup())

    #if(!$generator.isPrototype())
    private BusinessLogicEntityDM pageBusinessLogic;
    private boolean needRefreshBindings = true;
    private boolean isInitialized = false;
    #end

    protected String openerFormName;
    protected String openerFieldName;
    protected String openerConfirmValue;
    protected String openerHref;
    protected String openerAnchor;
    protected ${woName}Link opener;
    private String css;
    
	public String redirectScript = null;
	
    public String getCss() {
        return css;
    }

    public static WOActionResults createPage(WOContext context, #defPopupCreatePageArguments() String openerFormName, String openerFieldName, String openerConfirmValue, String openerHref, String openerAnchor, String css, ${componentDefinition.getName()}PopupLink opener#if(!$generator.isPrototype()), BusinessLogicCoreDM bl#end){
        // TODO: check arguments of this method
        ${componentDefinition.getName()}Popup nextPage = (${componentDefinition.getName()}Popup)WOApplication.application().pageWithName(${componentDefinition.getName()}Popup.class.getName(), context);
        #if(!$generator.isPrototype())
        if(bl==null) { 
            nextPage.pageBusinessLogic = BusinessLogicFactory.forPage(BusinessLogicEntityDM.class, nextPage); 
        } else {
            nextPage.pageBusinessLogic = BusinessLogicFactory.sameAs(BusinessLogicEntityDM.class, bl);
        }
            #foreach($bd in ${componentDefinition.getBindingDefinitions()})
                #if($bd.getType().getBaseEntity().isDMEOEntity())
        if(${bd.getVariableName()}!=null) {
            nextPage.${bd.getProperty().getFieldName()} = BusinessLogicFactory.sameAs(${bd.getTypeName()}BusinessLogic.class, nextPage.pageBusinessLogic).objectWithID(${bd.getVariableName()}.globalID());
        }
                #else
        nextPage.${bd.getProperty().getFieldName()} = $bd.getVariableName();
                #end
            #end
        #end
        nextPage.openerFormName = openerFormName;
        nextPage.openerFieldName = openerFieldName;
        nextPage.openerConfirmValue = openerConfirmValue;
        nextPage.openerHref = openerHref;
        nextPage.openerAnchor = openerAnchor;
        nextPage.opener = opener;
        nextPage.css = css;
        return nextPage;
    }

    public long getOperationComponentInstanceID() {
        if(opener != null)
            return ((IFlexoComponent)opener).getOperationComponentInstanceID();
        return ((IFlexoComponent)page()).getOperationComponentInstanceID();
    }
    
	public String getOpenerConfirmValue() {
		if(includePopupInPage())
			return (String)valueForBinding("confirmValue");
		
		return openerConfirmValue;
	}
	
	public String getOpenerHref() {
		if(includePopupInPage())
			return (String)valueForBinding("href");
		
		return openerHref;
	}
	
	private void setRedirectScript(String href)
    {
    	if(includePopupInPage())
    		redirectScript = "window.location = '" +href+ "';";
    	else
    		redirectScript = "window.opener.location = '" + href + "';";
    	redirectScript = redirectScript + "window.close();";
    }
#else
    public long getOperationComponentInstanceID() {
        return ((IFlexoComponent)page()).getOperationComponentInstanceID();
    }
    
#end
    public $woName(WOContext context) {
        super(context);
    }
#renderSequence($component.getRootSequence())

    public void appendToResponse(WOResponse r, WOContext c) {
        hiddenFieldValue = null;
        #if($appendToResponse.length()>0)$appendToResponse#end
        #if($componentDefinition.isOperation())
                pageDA = getUrlForOperation(context() #pageDAParametersCall($componentDefinition) #if($component.hasTabContainer()), #nameForWidget(${component.getTabContainers().firstElement()})SelectedTab()#end, getOperationComponentInstanceID());
        #else
          #foreach($bd in $componentDefinition.getBindingDefinitions())     
              #if(${generator.isPrototype()} && ${bd.getType().getBaseEntity().isDMEOEntity()})
                //ignore binding : ${bd.getVariableName()}
              #else
        		#set($type = ${bd.getType().getBaseEntity().getEntityClassName()})
        		#if(${bd.getType().isPrimitive()})
        			#if(${bd.getType().isCharPrimitive()})
        				#set($type = "Character")
        			#else
        				#set($type = ${generator.capitalize(${bd.getType().getBaseEntity().getEntityClassName()})})
        			#end
        		#end
        		if (valueForBinding("${bd.getVariableName()}")!=null)
        			${bd.getVariableName()}=($type)valueForBinding("${bd.getVariableName()}");
              #end
          #end
        #end

		##Assign all conditional to their initial binding
		##Use an intermediate binding for condition to avoid change of condition during takevaluefromrequest
		#foreach($widget in ${component.getAllSequenceWithConditionalOperators()})
			#if(${widget.getOperator().getBindingConditional().isBindingValid()})
				#set($javaRepresentation = ${widget.getOperator().getBindingConditional().getJavaCodeStringRepresentation()})
				#if(!${widget.isInRepetition()} && $javaRepresentation != "true" && $javaRepresentation != "false")
					#nameForWidget($widget) = $javaRepresentation;
				#end
			#end
		#end

        super.appendToResponse(r,c);
    }

    public void takeValuesFromRequest(WORequest r, WOContext c) {
#if($componentDefinition.isPopup())
        boolean needTakeValueFromRequest = false;
        if(includePopupInPage())
        {
            hiddenFieldValue = (String)r.formValueForKey(hiddenFieldName());
            if(hiddenFieldValue==null || hiddenFieldValue.length() == 0)
            {
                Enumeration<?> en = r.formValueKeys().objectEnumerator();
                while(en.hasMoreElements())
                {
                    String key = (String) en.nextElement();
                    
                    //Test if it is a popup reload (such a sort, a refresh or a batchswitch from a list inside the popup)
                    if(key.startsWith(uniqueIdentifier()) && r.formValuesForKey(key)!=null && ((String)r.formValueForKey(key)).length()>0)
                    {
                        needTakeValueFromRequest = true;
                        setValueForBinding(true, "displayPopupOnLoad");
                        break;
                    }
                }
            }
            else if(hiddenFieldValue.startsWith(uniqueIdentifier()))
            {
                needTakeValueFromRequest = true;
                setValueForBinding(true, "displayPopupOnLoad");
            }
            #foreach($b in $buttons)
                #if(${b.getHyperlinkType().isConfirm()})
                #set($staticName = "#upNameForWidget($b)")
                else if(hiddenFieldValue.startsWith(${staticName}+(uniqueIdentifier()!=null?uniqueIdentifier():"")))
                    needTakeValueFromRequest = true;
                #end
            #end
        }
        else
            needTakeValueFromRequest = true;
        if(needTakeValueFromRequest)
        {
            super.takeValuesFromRequest(r,c);
            #if($takeValuesFromRequest.length()>0)
            $takeValuesFromRequest#end
            if(includePopupInPage())
                formAction();
        }
        else {
            resetValidationDictionaries();
            #if(!$generator.isPrototype())
            needRefreshBindings = true;
            #end
        }
#else    
        super.takeValuesFromRequest(r,c);
        #if($takeValuesFromRequest.length()>0)
            $takeValuesFromRequest#end
  #if($componentDefinition.isTab())
        hiddenFieldValue = (String)r.formValueForKey(hiddenFieldName());
    #foreach($bd in $componentDefinition.getBindingDefinitions())     
      #if($bd.getIsMandatory())
        #if(${generator.isPrototype()} && ${bd.getType().getBaseEntity().isDMEOEntity()})
        //ignore binding : ${bd.getVariableName()}
        #else
        setValueForBinding(${bd.getVariableName()},"${bd.getVariableName()}");
        #end
      #end
    #end
        executeButton();
        #passValueForBindings($componentDefinition)
  #end
#end
    }

#if($componentDefinition.isTab())
    protected String executeButton() {
        if(hiddenFieldValue==null){
        #foreach($list in $component.getAllList())
            ${list.getHTMLListDescriptor().getListName()}DisplayGroup = null;
        #end
        }
        $formAction.toString()
        return null;
    }
#else
    public WOActionResults formAction() {
        if(hiddenFieldValue == null)
        {
        #foreach($list in $component.getAllList())
            ${list.getHTMLListDescriptor().getListName()}DisplayGroup = null;
        #end
            resetValidationDictionaries();
            return null;
        }
        $formAction.toString()
  #if($componentDefinition.isOperation())
     #foreach($ci in $componentDefinition.getComponentInstances())
        #if(${foreach.index}>0)else#end if (getOperationComponentInstanceID() == #componentInstance($ci)) {// @single Equivalent to operation ${ci.getOperationNode().getName()}@end
            return formAction$ci.getFlexoID()();
        }
     #end
  #end
        resetValidationDictionaries();
        return null;
    }
#end
#if($componentDefinition.isOperation())
    #parse($generator.getTemplatePath("PageInstanciation.java.vm"))
#end
    private void resetValidationDictionaries() {
        #foreach($dic in $validationDictionaries)
        $dic = null;
        #end
    }

#foreach($wid in $widgetNeedingConfirmMessage)
    #localizedConfirmMessage($wid)
#end

#if($componentDefinition.isPopup())
    public Boolean includePopupInPage() {
        //If parent is set, it mean that the popup is included in page
        return parent()!=null;
    }
    
    public String scriptClosePopup() {
        if(includePopupInPage())
            return WDLJSHiddenPopup.hidePopupJSString();
        return "self.close();";
    }
    
    public String uniqueIdentifier() {
        return "${componentDefinition.getName()}Popup" + (String)valueForBinding("confirmValue") + uniqueIdentifierForName();
    }
    
    public String uniqueIdentifierForName() {
        return (hasBinding("uniqueIdentifier")?valueForBinding("uniqueIdentifier").toString():"");
    }
    
    public String headerFooterComponentName() {
        if(includePopupInPage())
            return "WOGenericContainer";
        return "$project.getPrefix()PopupHeaderFooter";
    }
    
    public String formComponentName() {
        if(includePopupInPage())
            return "WOGenericContainer";
        return "WOForm";
    }
    #if(!$generator.isPrototype())
    
    @Override
    public void awake() {
        // Awake is always called first, it allows to initialize the component with the appropriate bindings
        // It should be called only once because awake is called even if it is not used anymore in the page 
        // (conditional become false or the element in the repetition has been deleted for example)
        if(!isInitialized)
            refreshBindingsIfNeeded();
        isInitialized = true;
            super.awake();
    }
    
    public boolean needRefreshBindings() {
        return includePopupInPage() && needRefreshBindings;
    }
    
    public void refreshBindingsIfNeeded()
    {
            if(needRefreshBindings())
        {
            if(parent() instanceof ${woName}Link)
                opener = (${woName}Link)parent();
            
            BusinessLogicCoreDM bl = (BusinessLogicCoreDM) valueForBinding("businessLogicCoreDM");
            if(bl != null)
                pageBusinessLogic = BusinessLogicFactory.sameAs(BusinessLogicEntityDM.class,bl);
            else
                pageBusinessLogic = BusinessLogicFactory.newLocal(BusinessLogicEntityDM.class, (WDLSession)session());
            
            #foreach($bd in $componentDefinition.getBindingDefinitions())
				#set($type = ${bd.getType().getBaseEntity().getEntityClassName()})
        		#if(${bd.getType().isPrimitive()})
        			#if(${bd.getType().isCharPrimitive()})
        				#set($type = "Character")
        			#else
        				#set($type = ${generator.capitalize(${bd.getType().getBaseEntity().getEntityClassName()})})
        			#end
				#end
				if (valueForBinding("${bd.getVariableName()}")!=null)
					${bd.getVariableName()}=($type)valueForBinding("${bd.getVariableName()}");
                #if(${bd.getType().getBaseEntity().isDMEOEntity()})
                    if(${bd.getVariableName()}!=null)
                        ${bd.getVariableName()} = BusinessLogicFactory.sameAs(${bd.getTypeName()}BusinessLogic.class, pageBusinessLogic).objectWithID(${bd.getVariableName()}.globalID());
                #end
            #end
            
            needRefreshBindings = false;
        }
    }
    #end
#end
}
