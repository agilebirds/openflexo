import java.io.UnsupportedEncodingException;

import java.util.ArrayList;
import java.io.File;
import java.io.IOException;

import java.text.SimpleDateFormat;
import com.webobjects.appserver.WOApplication;
import be.denali.core.woapp.DLSession;
import com.webobjects.appserver.WOContext;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableDictionary;

import ${projectGenerator.getProcessBusinessDataBaseEntity().getFullQualifiedName()};
#if(${projectGenerator.getWorkflowClassPackage()})
	import ${projectGenerator.getWorkflowClassPackage()}.*;
	import ${projectGenerator.getWorkflowClassPackage()}.WorkflowProcess.WorkflowBusinessData;
#end
#foreach($imp in $entity.getAllNeededImports())
import ${imp};
#end
/**
* Session object.
* Generated by OpenFlexo.
* @author Agile Birds sprl.
*/
@SuppressWarnings("serial")
public class Session extends DLSession {
#if($generator.isPrototype())
    private WorkflowComponentInstance workflowComponentInstance;
	private ArrayList<File> tempFiles;
		
	private BusinessDataStorage businessDataStorage;
#end    
    public Session(){
        super();
        setCurrentHeaderFooterComponentName("${project.getPrefix()}HeaderFooter");
		#if($generator.isPrototype())
			businessDataStorage = new BusinessDataStorage(${project.getPrefix()}Config.getConfig().getPrototypeSamplesFolderPath());
		#end 
    }
	
	@Override
    public void terminate() 
    {
    	try
    	{
    		deleteTempFiles();
    	}
    	catch(Exception e)
    	{
    		e.printStackTrace();
    	}
    	
    	super.terminate();
    }
	
	public File getNewTempFile() 
	{
		try 
		{
			File tempFile = File.createTempFile("TempFile", null);
			tempFile.deleteOnExit();
			addToTempFiles(tempFile);
			return tempFile;
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
			return null;
		}
    }
	
	public File getNewTempDirectory()
	{
		File tempDir;
		try 
		{
			tempDir = File.createTempFile("TempDir", null);
			tempDir.delete();
			if(!tempDir.mkdirs())
				throw new IOException("Cannot create temp directory '" +tempDir.getAbsolutePath()+ "'.");
			tempDir.deleteOnExit();
			addToTempFiles(tempDir);
			return tempDir;
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
			return null;
		}
	}
	
	private void addToTempFiles(File tempFile) 
	{
		if (tempFiles == null)
			tempFiles = new ArrayList<File>();

		tempFiles.add(tempFile);
	}
	
    public void deleteTempFiles() 
    {
		if (tempFiles != null) 
		{
			for (File tempFile : tempFiles)
				${project.getPrefix()}Util.deleteFile(tempFile);
		}
		tempFiles = null;
	}
	
#if($generator.isPrototype())        

	public BusinessDataStorage getBusinessDataStorage()
	{
		return businessDataStorage;
	}
	
	public WorkflowComponentInstance getWorkflowComponentInstance()
	{
		if(workflowComponentInstance == null)
    		workflowComponentInstance = WorkflowComponentInstance.None;
		return workflowComponentInstance;
	}
	
	public void setWorkflowComponentInstance(WorkflowComponentInstance workflowComponentInstance)
	{
		this.workflowComponentInstance = workflowComponentInstance;
	}
	
	public void setWorkflowComponentInstance(long componentInstanceId)
	{
		workflowComponentInstance = WorkflowComponentInstance.getWorkflowComponentInstance(componentInstanceId);
	}
	
    public void reset() {
        #foreach($prop in $entity.getOrderedProperties())
        #if(!${prop.getType().isPrimitive()} && !${prop.isPublicStaticFinalField()})
            #if($prop.isPublicAccessorOnly())
                ${prop.getSetterName()}(null);
            #else
                ${prop.getFieldName()} = null;
            #end
        #end
        #end
    }
	
	public ProcessBusinessData getCurrentProcessBusinessData()
	{
		return businessDataStorage.getCurrentProcessBusinessData(workflowComponentInstance.getProcess());
	}
	
    public void setCurrentProcessBusinessData(ProcessBusinessData processBusinessData) {
        businessDataStorage.setCurrentProcessBusinessData(workflowComponentInstance.getProcess(), processBusinessData);
    }
	
    public void saveCurrentProcessBusinessData() {
        businessDataStorage.saveCurrentProcessBusinessData(workflowComponentInstance.getProcess());
    }

#end
    /**
     * Override DLSession.
     *
     * Check if the session has all needed information (currentUser)
     * @return true if the session is valid for this direct action
     * @see WDLDirectAction${sharp}hasValidSessionOrDoNotNeedOne(String)
     * @see DLSession${sharp}invalidSessionMessageForContext(WOContext)
     * @see WDLSession#currentUserNeedToChangePassword()
     * @see WDLDirectAction${sharp}performActionNamed(String)
     */
    public String invalidSessionMessageForContext(WOContext context) {
        if(isTerminating()) return "Session is terminating";
        if(currentUser() == null) return "No current user";
        return null;
    }
}