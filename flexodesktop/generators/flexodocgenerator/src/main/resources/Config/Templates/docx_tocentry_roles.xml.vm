#**
* Context contains the following keys
* - project: the current project (class FlexoProject)
* - projectGenerator: the current Project Generator (class ProjectDocGenerator)
* - generator: the current generator (DefinitionsDocGenerator)
* - repository: the current repository for which we generate the doc (DGRepository)
* - level: the level to use in title.
*#
#set($workflow = ${project.getWorkflow()})
#if(${workflow.getRoleList().getRoles().size()}>0 || ${workflow.getImportedRoleList().getRoles().size()}>0)
	
	#if(${workflow.getRoleList().getRoles().size()}>0)
		#renderScreenshotForObject(${workflow.getRoleList()})
	#end
	
	<w:p>
		<w:r>
			<w:t>The following roles are defined for this process:</w:t>
		</w:r>
    </w:p>
	
	#set($rolesTablesContents = $generator.getNewVector())
	#foreach($role in ${workflow.getSortedRoles()})
		#set($row = $generator.getNewVector())
		#void($row.add("<w:p>#renderNameWithRPr($role '<w:b/>')</w:p>"))
		#void($row.add("#description($role)"))
		#void($rolesTablesContents.add($row))
	#end
	#foreach($role in ${workflow.getImportedRoleList().getSortedRoles()})
		#set($row = $generator.getNewVector())
        #void($row.add("<w:p>#renderNameWithRPr($role '<w:b/>')</w:p>"))
		#void($row.add("#description($role)"))
		#void($rolesTablesContents.add($row))
	#end
	
	#renderDocxTable(["Role", "Description"] $rolesTablesContents)

#end
