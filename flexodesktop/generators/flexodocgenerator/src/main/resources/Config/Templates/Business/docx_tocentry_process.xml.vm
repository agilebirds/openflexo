## -*-xml-*-
#**
* Context contains the following keys
* - project: the current project (class FlexoProject)
* - projectGenerator: the current Project Generator (class ProjectDocGenerator)
* - generator: the current generator (DefinitionsDocGenerator)
* - repository: the current repository for which we generate the doc (DGRepository)
* - level: the level to use in title.
* - objet: the flexo process to generate
*#
#macro(nodeTypeInTitle $node)
    #if(${node.isOperatorNode()})
            #if(${node.isTestNode()})
                Test: 
            #end
    #elseif(${node.getClassNameKey()} == 'event_node')
            Event: 
    #else ##Is activity node
        #if($node.isSubProcessNode())
            #if($node.isFork())
                Activity (parallel sub-process): 
            #elseif($node.isLoop())
                Activity (loop sub-process): 
            #elseif($node.isSingle())
                Activity bloc: 
            #elseif($a.isWSCall()) 
                Activity  (WS call sub-process): 
            #else
                Activity (loop-single-instance sub-process):
            #end
        #else
            Activity:
        #end
    #end
#end

#macro(activityMustBeDocumented $node $res)
    #set($res=false)
    #if(${node.isOperatorNode()})
            #if(${node.isTestNode()})
                #set($res=true)
            #end
    #elseif(${node.getClassNameKey()} == 'event_node')
            #set($res=true) 
    #else ##Is activity node
        #if($node.isSubProcessNode())
            #if($node.isFork())
                #set($res=true) 
            #elseif($node.isLoop())
                #set($res=true) 
            #elseif($node.isSingle())
                #set($res=true)
            #elseif($a.isWSCall()) 
                #set($res=true) 
            #else
                #set($res=true)
            #end
        #else
            #set($res=true)
        #end
    #end
    #if($node.getDontGenerate())
        #set($res=false)
    #end
#end

#set($process = $object)

#if(!$process.isRootProcess())
    #if(${process.getSubProcessNodes().size()}>0)
        <w:p>
            <w:r>
                <w:t xml:space="preserve">This process is used in the following sub-process nodes:</w:t>
            </w:r>
        </w:p>
        #foreach($sub in $process.getSubProcessNodes())
            <w:p>
                <w:r>
                    <w:tab/>
                    <w:t xml:space="preserve">- </w:t>
                </w:r>
                <w:hyperlink w:anchor="${generator.getReference($sub)}" w:history="1">
                    #renderNameWithRPr($sub '<w:rStyle w:val="Hyperlink"/>')
                </w:hyperlink>
                <w:r>
                    <w:t xml:space="preserve"> located in the process </w:t>
                </w:r>
                <w:hyperlink w:anchor="${generator.getReference($sub.getProcess())}" w:history="1">
                    #renderNameWithRPr(${sub.getProcess()} '<w:rStyle w:val="Hyperlink"/>')
                </w:hyperlink>
            </w:p>
        #end
    #else
        <w:p>
            <w:r>
                <w:t xml:space="preserve">This process is not used so far.</w:t>
            </w:r>
        </w:p>
    #end
#end

    <w:p>
        <w:r>
            <w:rPr>
                <w:pStyle w:val="Heading$level"/>
                <w:b/>
                <w:u w:val="single"/>
            </w:rPr>
            <w:t xml:space="preserve">Description:</w:t>
        </w:r>
    </w:p>
    
#description($process)
#renderScreenshotForObject($process)
#if(${process.hasSpecificDescriptionForKey('Objectives')})  
    <w:p>
        <w:r>
            <w:rPr>
                <w:pStyle w:val="Heading$level"/>
                <w:b/>
                <w:u w:val="single"/>
            </w:rPr>
            <w:t xml:space="preserve">Objectives:</w:t>
        </w:r>
    </w:p>
#renderSpecificDescription($process "Objectives")
#end

#metricsForNode($process)
#set($currentTocEntry = ${generator.getNewHolder()})
#getCurrentTocEntry($currentTocEntry)
#set($currentTocEntry = ${currentTocEntry.get()})
#if(${currentTocEntry.getIncludeStatusList()})
    #statusesForNode($process)
#end

#if(!${repository.getTocRepository().getUseEmbeddedEvents()})
    #if(${process.hasAtLeastOneEventToDocument()})
        <w:p>
            <w:r>
                <w:rPr>
                    <w:pStyle w:val="Heading$level"/>
                    <w:b/>
                    <w:u w:val="single"/>
                </w:rPr>
                <w:t xml:space="preserve">Events list:</w:t>
            </w:r>
        </w:p>


        
        #set($eventTablesContents = $generator.getNewVector())
        #foreach($event in ${object.getSortedEvents()})
            #if(!$event.getDontGenerate())
                #set($row = $generator.getNewVector())
                #void($row.add("<w:p>#renderNameWithRPr($event '<w:b/>')</w:p>"))
                #void($row.add("#description($event)"))
                #void($eventTablesContents.add($row))
            #end
        #end
        
        #renderDocxTable(["Event", "Description"] $eventTablesContents)
    #end
    #set($nodeList = ${process.getSortedActivitiesAndOperators()})
#else
    #set($nodeList = ${process.getSortedActivitiesAndOperatorsWithEvents()})
#end

#set($nodes = ${generator.getNewVector()})
#foreach($node in $nodeList)
    #if(!$node.getDontGenerate())
        #void($nodes.add($node))
    #end
#end
#if(${nodes.size()}>0)
    <w:p>
        <w:r>
            <w:rPr>
                <w:pStyle w:val="Heading$level"/>
                <w:u w:val="single"/>
                <w:b/>
            </w:rPr>
            <w:t xml:space="preserve">Activities :</w:t>
        </w:r>
    </w:p>
    <w:p>
        <w:pPr>
            <w:numPr>
                <w:ilvl w:val="0" />
                <w:numId w:val="99" />
            </w:numPr>
            <w:vanish/>
        </w:pPr>
        <w:r>
            <w:t xml:space="preserve"></w:t>
        </w:r>
    </w:p>

<w:tbl>
    <w:tblPr>
        <w:tblW w:w="0" w:type="auto" />
        <w:tblStyle w:val="TableGrid"/>
        <w:tblLook w:val="04A0" />
    </w:tblPr>
    <w:tblGrid>
                <w:gridCol w:w="565" />
                <w:gridCol w:w="3118" />
                <w:gridCol w:w="5636" />
    </w:tblGrid>
    <w:tr>
            <w:tc>  
            <w:tcPr>
                <w:tcW w:w="565" w:type="dxa" />
            </w:tcPr>
                <w:p>
                    <w:r>
                        <w:t>${sharp}</w:t>
                    </w:r>
                </w:p>
            </w:tc>
            <w:tc>  
                <w:tcPr>
                    <w:tcW w:w="3118" w:type="dxa" />
                </w:tcPr>
                <w:p>
                    <w:r>
                        <w:t>Name</w:t>
                    </w:r>
                </w:p>
            </w:tc>
            <w:tc>  
                <w:tcPr>
                    <w:tcW w:w="5636" w:type="dxa" />
                </w:tcPr>
                <w:p>
                    <w:r>
                        <w:t>Description</w:t>
                    </w:r>
                </w:p>
            </w:tc>
        </w:tr>
    #foreach($node in $nodes)
        <w:tr>
            <w:tc>  
                <w:tcPr>
                    <w:tcW w:w="565" w:type="dxa" />
                </w:tcPr>
                <w:p>
                    <w:pPr>
                        <w:numPr>
                            <w:ilvl w:val="1" />
                            <w:numId w:val="99" />
                        </w:numPr>
                    </w:pPr>
                    <w:r>
                        <w:t></w:t>
                    </w:r>
                </w:p>
            </w:tc>
            <w:tc>  
                <w:tcPr>
                    <w:tcW w:w="3118" w:type="dxa" />
                </w:tcPr>
                <w:p>#renderName($node)</w:p>
            </w:tc>
            <w:tc>  
                <w:tcPr>
                    <w:tcW w:w="5636" w:type="dxa" />
                </w:tcPr>
                #description($node)
            </w:tc>
        </w:tr>
    #end
    </w:tbl>
#end

#* DDW<!-- ddw Tue Mar 23 18:23:14 2010 -->
Render the table of operation screens for this process

#renderOperationsTable($process)
*#

#**
* Recursion on subprocesses
*#
#renderProcessOrFolderChildren($process $level)
