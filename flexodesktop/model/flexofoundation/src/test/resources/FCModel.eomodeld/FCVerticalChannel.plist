{
    attributes = (
        {
            allowsNull = N; 
            columnName = "VC_CATEGORY_ID"; 
            name = categoryID; 
            prototypeName = id; 
        }, 
        {allowsNull = N; columnName = "VC_ID"; name = channelID; prototypeName = id; }, 
        {columnName = "VC_CREATION_DATE"; name = creationDate; prototypeName = date; }, 
        {columnName = "VC_DESCRIPTION"; name = description; prototypeName = str2000; }, 
        {columnName = "VC_STDAP_ID"; name = stdApID; prototypeName = id; }, 
        {columnName = "VC_UPDATE_DATE"; name = updateDate; prototypeName = date; }, 
        {columnName = "VC_UPDATOR"; name = updator; prototypeName = str100; }
    ); 
    className = FCVerticalChannel; 
    classProperties = (
        channelID, 
        categoryID, 
        stdApID, 
        creationDate, 
        updateDate, 
        updator, 
        description, 
        category
    ); 
    externalName = "FC_VERTICAL_CHANNEL"; 
    fetchSpecificationDictionary = {}; 
    name = FCVerticalChannel; 
    primaryKeyAttributes = (channelID); 
    relationships = (
        {
            definition = "manyAccessPoints.accessPoint"; 
            internalInfo = {"_nameInObjectStore" = "manyAccessPoints_accessPoint"; }; 
            joinSemantic = EOInnerJoin; 
            name = accessPoints; 
        }, 
        {
            definition = "manyBanners.banner"; 
            internalInfo = {"_nameInObjectStore" = "manyBanners_banner"; }; 
            joinSemantic = EOInnerJoin; 
            name = banners; 
        }, 
        {
            destination = DLRCategory; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = categoryID; sourceAttribute = categoryID; }); 
            name = category; 
        }, 
        {
            destination = FCAccessChannel; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = channelID; sourceAttribute = channelID; }); 
            name = manyAccessPoints; 
        }, 
        {
            destination = FCPubliBanner; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = channelID; sourceAttribute = channelID; }); 
            name = manyBanners; 
        }, 
        {
            destination = FCPubliVideoVerticalChannel; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = channelID; sourceAttribute = channelID; }); 
            name = manyVideos; 
        }, 
        {
            definition = "manyVideos.video"; 
            internalInfo = {"_nameInObjectStore" = "manyVideos_video"; }; 
            joinSemantic = EOInnerJoin; 
            name = videos; 
        }
    ); 
}
