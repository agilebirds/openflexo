{
    attributes = (
	    {columnName = freeDownload; name = freeDownload; prototypeName = boolean; },
        {columnName = viewCount; name = viewCount; prototypeName = int; }, 
        {columnName = copyrightOwner; name = copyrightOwner; prototypeName = str2000; }, 
        {columnName = creationDate; name = creationDate; prototypeName = date; }, 
        {columnName = creatorLogin; name = creator; prototypeName = str200; }, 
        {
            columnName = defaultSnapshotID; 
            name = defaultSnapshotID; 
            prototypeName = str200; 
        }, 
        {columnName = director; name = director; prototypeName = str1000; }, 
        {columnName = index; name = index; prototypeName = id; }, 
        {columnName = length; name = length; prototypeName = str10; width = 64; }, 
        {columnName = licenseType; name = licenseType; prototypeName = str50; }, 
        {columnName = onlineDate; name = onlineDate; prototypeName = date; }, 
        {
            columnName = originalLanguage; 
            name = originalLanguage; 
            prototypeName = str10; 
        }, 
        {columnName = originalRef; name = originalRef; prototypeName = str1000; }, 
        {columnName = producers; name = producers; prototypeName = smallArray; }, 
        {
            columnName = productionCountry; 
            name = productionCountry; 
            prototypeName = str10; 
        }, 
        {columnName = productionYear; name = productionYear; prototypeName = str10; }, 
        {columnName = seeDocFolderID; name = seeDocFolderID; prototypeName = str200; }, 
        {columnName = seeUrls; name = seeUrls; prototypeName = bigArray; }, 
        {columnName = snapshotFolderID; name = snapshotFolderID; prototypeName = str200; }, 
        {columnName = subject; name = subject; prototypeName = str2000; }, 
        {columnName = summary; name = summary; prototypeName = clob1000000; }, 
        {columnName = title; name = title; prototypeName = str2000; }, 
        {columnName = subTitle; name = subTitle; prototypeName = str2000; }, 
        {columnName = uniqueRef; name = uniqueRef; prototypeName = str1000; }, 
        {columnName = updateDate; name = updateDate; prototypeName = date; }, 
        {columnName = updaterLogin; name = updater; prototypeName = str200; }, 
        {columnName = videoFolderID; name = videoFolderID; prototypeName = str200; }, 
        {allowsNull = N; columnName = videoID; name = videoID; prototypeName = int; }, 
        {columnName = videoStatus; name = videoStatus; prototypeName = str20; }
    ); 
    className = DLRVideo; 
    classProperties = (
        videoID, 
        freeDownload,
        uniqueRef, 
        title,
        subTitle,
        subject, 
        summary, 
        productionYear, 
        length, 
        director, 
        originalRef, 
        creationDate, 
        updateDate, 
        onlineDate, 
        creator, 
        updater, 
        licenseType, 
        producers, 
        copyrightOwner, 
        videoFolderID, 
        snapshotFolderID, 
        seeDocFolderID, 
        seeUrls, 
        sequences, 
        videoStatus, 
        productionCountry, 
        originalLanguage, 
        defaultSnapshotID, 
        fileFormats, 
        index, 
        seeVideos,
        seenByVideos, 
        categories, 
        viewCount
    ); 
    externalName = DLRVideo; 
    fetchSpecificationDictionary = {}; 
    internalInfo = {"_clientClassPropertyNames" = (Attribute); }; 
    name = DLRVideo; 
    primaryKeyAttributes = (videoID); 
    relationships = (
        {
            definition = "mnCategories.catCategory"; 
            internalInfo = {"_nameInObjectStore" = "mnCategories_catCategory"; }; 
            joinSemantic = EOInnerJoin; 
            name = categories; 
        }, 
        {
            destination = DLRVideoFormat; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = videoID; sourceAttribute = videoID; }); 
            name = fileFormats; 
        }, 
        {
            destination = MNVideoCat; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = videoID; sourceAttribute = videoID; }); 
            name = mnCategories; 
            propagatesPrimaryKey = Y; 
        }, 
        {
            destination = MNVideoVideo; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = videoID; sourceAttribute = videoID; }); 
            name = mnSeeVideos; 
            propagatesPrimaryKey = Y; 
        }, 
        {
            destination = MNVideoVideo; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = seeVideoID; sourceAttribute = videoID; }); 
            name = mnSeenByVideos; 
        }, 
        {
            definition = "mnSeeVideos.seeVideo"; 
            joinSemantic = EOInnerJoin; 
            name = seeVideos; 
        }, 
        {
            definition = "mnSeenByVideos.seenByVideo"; 
            joinSemantic = EOInnerJoin; 
            name = seenByVideos; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = DLRSequence; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = videoID; sourceAttribute = videoID; }); 
            name = sequences; 
        }
    ); 
}
