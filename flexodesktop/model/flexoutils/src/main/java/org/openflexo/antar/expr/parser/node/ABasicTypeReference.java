/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.antar.expr.parser.node;

import org.openflexo.antar.expr.parser.analysis.*;

@SuppressWarnings("nls")
public final class ABasicTypeReference extends PTypeReference {
	private TDollar _dollar_;
	private PTypeReferencePath _typeReferencePath_;

	public ABasicTypeReference() {
		// Constructor
	}

	public ABasicTypeReference(@SuppressWarnings("hiding") TDollar _dollar_,
			@SuppressWarnings("hiding") PTypeReferencePath _typeReferencePath_) {
		// Constructor
		setDollar(_dollar_);

		setTypeReferencePath(_typeReferencePath_);

	}

	@Override
	public Object clone() {
		return new ABasicTypeReference(cloneNode(this._dollar_), cloneNode(this._typeReferencePath_));
	}

	@Override
	public void apply(Switch sw) {
		((Analysis) sw).caseABasicTypeReference(this);
	}

	public TDollar getDollar() {
		return this._dollar_;
	}

	public void setDollar(TDollar node) {
		if (this._dollar_ != null) {
			this._dollar_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._dollar_ = node;
	}

	public PTypeReferencePath getTypeReferencePath() {
		return this._typeReferencePath_;
	}

	public void setTypeReferencePath(PTypeReferencePath node) {
		if (this._typeReferencePath_ != null) {
			this._typeReferencePath_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._typeReferencePath_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._dollar_) + toString(this._typeReferencePath_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused") Node child) {
		// Remove child
		if (this._dollar_ == child) {
			this._dollar_ = null;
			return;
		}

		if (this._typeReferencePath_ == child) {
			this._typeReferencePath_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild) {
		// Replace child
		if (this._dollar_ == oldChild) {
			setDollar((TDollar) newChild);
			return;
		}

		if (this._typeReferencePath_ == oldChild) {
			setTypeReferencePath((PTypeReferencePath) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
