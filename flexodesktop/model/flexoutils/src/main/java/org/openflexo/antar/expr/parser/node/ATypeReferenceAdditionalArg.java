/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.antar.expr.parser.node;

import org.openflexo.antar.expr.parser.analysis.*;

@SuppressWarnings("nls")
public final class ATypeReferenceAdditionalArg extends PTypeReferenceAdditionalArg {
	private TComma _comma_;
	private PTypeReference _typeReference_;

	public ATypeReferenceAdditionalArg() {
		// Constructor
	}

	public ATypeReferenceAdditionalArg(@SuppressWarnings("hiding") TComma _comma_,
			@SuppressWarnings("hiding") PTypeReference _typeReference_) {
		// Constructor
		setComma(_comma_);

		setTypeReference(_typeReference_);

	}

	@Override
	public Object clone() {
		return new ATypeReferenceAdditionalArg(cloneNode(this._comma_), cloneNode(this._typeReference_));
	}

	@Override
	public void apply(Switch sw) {
		((Analysis) sw).caseATypeReferenceAdditionalArg(this);
	}

	public TComma getComma() {
		return this._comma_;
	}

	public void setComma(TComma node) {
		if (this._comma_ != null) {
			this._comma_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._comma_ = node;
	}

	public PTypeReference getTypeReference() {
		return this._typeReference_;
	}

	public void setTypeReference(PTypeReference node) {
		if (this._typeReference_ != null) {
			this._typeReference_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._typeReference_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._comma_) + toString(this._typeReference_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused") Node child) {
		// Remove child
		if (this._comma_ == child) {
			this._comma_ = null;
			return;
		}

		if (this._typeReference_ == child) {
			this._typeReference_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild) {
		// Replace child
		if (this._comma_ == oldChild) {
			setComma((TComma) newChild);
			return;
		}

		if (this._typeReference_ == oldChild) {
			setTypeReference((PTypeReference) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
