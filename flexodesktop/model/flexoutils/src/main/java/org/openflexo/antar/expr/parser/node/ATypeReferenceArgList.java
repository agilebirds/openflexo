/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.antar.expr.parser.node;

import java.util.*;
import org.openflexo.antar.expr.parser.analysis.*;

@SuppressWarnings("nls")
public final class ATypeReferenceArgList extends PTypeReferenceArgList {
	private TLt _lt_;
	private PTypeReference _typeReference_;
	private final LinkedList<PTypeReferenceAdditionalArg> _typeReferenceAdditionalArgs_ = new LinkedList<PTypeReferenceAdditionalArg>();
	private TGt _gt_;

	public ATypeReferenceArgList() {
		// Constructor
	}

	public ATypeReferenceArgList(@SuppressWarnings("hiding") TLt _lt_, @SuppressWarnings("hiding") PTypeReference _typeReference_,
			@SuppressWarnings("hiding") List<PTypeReferenceAdditionalArg> _typeReferenceAdditionalArgs_,
			@SuppressWarnings("hiding") TGt _gt_) {
		// Constructor
		setLt(_lt_);

		setTypeReference(_typeReference_);

		setTypeReferenceAdditionalArgs(_typeReferenceAdditionalArgs_);

		setGt(_gt_);

	}

	@Override
	public Object clone() {
		return new ATypeReferenceArgList(cloneNode(this._lt_), cloneNode(this._typeReference_),
				cloneList(this._typeReferenceAdditionalArgs_), cloneNode(this._gt_));
	}

	@Override
	public void apply(Switch sw) {
		((Analysis) sw).caseATypeReferenceArgList(this);
	}

	public TLt getLt() {
		return this._lt_;
	}

	public void setLt(TLt node) {
		if (this._lt_ != null) {
			this._lt_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._lt_ = node;
	}

	public PTypeReference getTypeReference() {
		return this._typeReference_;
	}

	public void setTypeReference(PTypeReference node) {
		if (this._typeReference_ != null) {
			this._typeReference_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._typeReference_ = node;
	}

	public LinkedList<PTypeReferenceAdditionalArg> getTypeReferenceAdditionalArgs() {
		return this._typeReferenceAdditionalArgs_;
	}

	public void setTypeReferenceAdditionalArgs(List<PTypeReferenceAdditionalArg> list) {
		this._typeReferenceAdditionalArgs_.clear();
		this._typeReferenceAdditionalArgs_.addAll(list);
		for (PTypeReferenceAdditionalArg e : list) {
			if (e.parent() != null) {
				e.parent().removeChild(e);
			}

			e.parent(this);
		}
	}

	public TGt getGt() {
		return this._gt_;
	}

	public void setGt(TGt node) {
		if (this._gt_ != null) {
			this._gt_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._gt_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._lt_) + toString(this._typeReference_) + toString(this._typeReferenceAdditionalArgs_)
				+ toString(this._gt_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused") Node child) {
		// Remove child
		if (this._lt_ == child) {
			this._lt_ = null;
			return;
		}

		if (this._typeReference_ == child) {
			this._typeReference_ = null;
			return;
		}

		if (this._typeReferenceAdditionalArgs_.remove(child)) {
			return;
		}

		if (this._gt_ == child) {
			this._gt_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild) {
		// Replace child
		if (this._lt_ == oldChild) {
			setLt((TLt) newChild);
			return;
		}

		if (this._typeReference_ == oldChild) {
			setTypeReference((PTypeReference) newChild);
			return;
		}

		for (ListIterator<PTypeReferenceAdditionalArg> i = this._typeReferenceAdditionalArgs_.listIterator(); i.hasNext();) {
			if (i.next() == oldChild) {
				if (newChild != null) {
					i.set((PTypeReferenceAdditionalArg) newChild);
					newChild.parent(this);
					oldChild.parent(null);
					return;
				}

				i.remove();
				oldChild.parent(null);
				return;
			}
		}

		if (this._gt_ == oldChild) {
			setGt((TGt) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
