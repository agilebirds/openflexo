/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.antar.expr.parser.node;

import org.openflexo.antar.expr.parser.analysis.*;

@SuppressWarnings("nls")
public final class AEqExprExpr extends PExpr {
	private PExpr _left_;
	private TEq _eq_;
	private PExpr2 _right_;

	public AEqExprExpr() {
		// Constructor
	}

	public AEqExprExpr(@SuppressWarnings("hiding") PExpr _left_, @SuppressWarnings("hiding") TEq _eq_,
			@SuppressWarnings("hiding") PExpr2 _right_) {
		// Constructor
		setLeft(_left_);

		setEq(_eq_);

		setRight(_right_);

	}

	@Override
	public Object clone() {
		return new AEqExprExpr(cloneNode(this._left_), cloneNode(this._eq_), cloneNode(this._right_));
	}

	@Override
	public void apply(Switch sw) {
		((Analysis) sw).caseAEqExprExpr(this);
	}

	public PExpr getLeft() {
		return this._left_;
	}

	public void setLeft(PExpr node) {
		if (this._left_ != null) {
			this._left_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._left_ = node;
	}

	public TEq getEq() {
		return this._eq_;
	}

	public void setEq(TEq node) {
		if (this._eq_ != null) {
			this._eq_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._eq_ = node;
	}

	public PExpr2 getRight() {
		return this._right_;
	}

	public void setRight(PExpr2 node) {
		if (this._right_ != null) {
			this._right_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._right_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._left_) + toString(this._eq_) + toString(this._right_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused") Node child) {
		// Remove child
		if (this._left_ == child) {
			this._left_ = null;
			return;
		}

		if (this._eq_ == child) {
			this._eq_ = null;
			return;
		}

		if (this._right_ == child) {
			this._right_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild) {
		// Replace child
		if (this._left_ == oldChild) {
			setLeft((PExpr) newChild);
			return;
		}

		if (this._eq_ == oldChild) {
			setEq((TEq) newChild);
			return;
		}

		if (this._right_ == oldChild) {
			setRight((PExpr2) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
