/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.antar.expr.parser.node;

import org.openflexo.antar.expr.parser.analysis.Analysis;

@SuppressWarnings("nls")
public final class ASqrtFuncFunction extends PFunction {
	private TSqrt _sqrt_;
	private TLPar _lPar_;
	private PExpr2 _expr2_;
	private TRPar _rPar_;

	public ASqrtFuncFunction() {
		// Constructor
	}

	public ASqrtFuncFunction(@SuppressWarnings("hiding") TSqrt _sqrt_, @SuppressWarnings("hiding") TLPar _lPar_,
			@SuppressWarnings("hiding") PExpr2 _expr2_, @SuppressWarnings("hiding") TRPar _rPar_) {
		// Constructor
		setSqrt(_sqrt_);

		setLPar(_lPar_);

		setExpr2(_expr2_);

		setRPar(_rPar_);

	}

	@Override
	public Object clone() {
		return new ASqrtFuncFunction(cloneNode(this._sqrt_), cloneNode(this._lPar_), cloneNode(this._expr2_), cloneNode(this._rPar_));
	}

	@Override
	public void apply(Switch sw) {
		((Analysis) sw).caseASqrtFuncFunction(this);
	}

	public TSqrt getSqrt() {
		return this._sqrt_;
	}

	public void setSqrt(TSqrt node) {
		if (this._sqrt_ != null) {
			this._sqrt_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._sqrt_ = node;
	}

	public TLPar getLPar() {
		return this._lPar_;
	}

	public void setLPar(TLPar node) {
		if (this._lPar_ != null) {
			this._lPar_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._lPar_ = node;
	}

	public PExpr2 getExpr2() {
		return this._expr2_;
	}

	public void setExpr2(PExpr2 node) {
		if (this._expr2_ != null) {
			this._expr2_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._expr2_ = node;
	}

	public TRPar getRPar() {
		return this._rPar_;
	}

	public void setRPar(TRPar node) {
		if (this._rPar_ != null) {
			this._rPar_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._rPar_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._sqrt_) + toString(this._lPar_) + toString(this._expr2_) + toString(this._rPar_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused") Node child) {
		// Remove child
		if (this._sqrt_ == child) {
			this._sqrt_ = null;
			return;
		}

		if (this._lPar_ == child) {
			this._lPar_ = null;
			return;
		}

		if (this._expr2_ == child) {
			this._expr2_ = null;
			return;
		}

		if (this._rPar_ == child) {
			this._rPar_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild) {
		// Replace child
		if (this._sqrt_ == oldChild) {
			setSqrt((TSqrt) newChild);
			return;
		}

		if (this._lPar_ == oldChild) {
			setLPar((TLPar) newChild);
			return;
		}

		if (this._expr2_ == oldChild) {
			setExpr2((PExpr2) newChild);
			return;
		}

		if (this._rPar_ == oldChild) {
			setRPar((TRPar) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
