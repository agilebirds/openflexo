/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.antar.expr.parser.node;

import org.openflexo.antar.expr.parser.analysis.*;

@SuppressWarnings("nls")
public final class ACastTerm extends PTerm {
	private TLPar _lPar_;
	private PTypeReference _typeReference_;
	private TRPar _rPar_;
	private PTerm _term_;

	public ACastTerm() {
		// Constructor
	}

	public ACastTerm(@SuppressWarnings("hiding") TLPar _lPar_, @SuppressWarnings("hiding") PTypeReference _typeReference_,
			@SuppressWarnings("hiding") TRPar _rPar_, @SuppressWarnings("hiding") PTerm _term_) {
		// Constructor
		setLPar(_lPar_);

		setTypeReference(_typeReference_);

		setRPar(_rPar_);

		setTerm(_term_);

	}

	@Override
	public Object clone() {
		return new ACastTerm(cloneNode(this._lPar_), cloneNode(this._typeReference_), cloneNode(this._rPar_), cloneNode(this._term_));
	}

	@Override
	public void apply(Switch sw) {
		((Analysis) sw).caseACastTerm(this);
	}

	public TLPar getLPar() {
		return this._lPar_;
	}

	public void setLPar(TLPar node) {
		if (this._lPar_ != null) {
			this._lPar_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._lPar_ = node;
	}

	public PTypeReference getTypeReference() {
		return this._typeReference_;
	}

	public void setTypeReference(PTypeReference node) {
		if (this._typeReference_ != null) {
			this._typeReference_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._typeReference_ = node;
	}

	public TRPar getRPar() {
		return this._rPar_;
	}

	public void setRPar(TRPar node) {
		if (this._rPar_ != null) {
			this._rPar_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._rPar_ = node;
	}

	public PTerm getTerm() {
		return this._term_;
	}

	public void setTerm(PTerm node) {
		if (this._term_ != null) {
			this._term_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._term_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._lPar_) + toString(this._typeReference_) + toString(this._rPar_) + toString(this._term_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused") Node child) {
		// Remove child
		if (this._lPar_ == child) {
			this._lPar_ = null;
			return;
		}

		if (this._typeReference_ == child) {
			this._typeReference_ = null;
			return;
		}

		if (this._rPar_ == child) {
			this._rPar_ = null;
			return;
		}

		if (this._term_ == child) {
			this._term_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild) {
		// Replace child
		if (this._lPar_ == oldChild) {
			setLPar((TLPar) newChild);
			return;
		}

		if (this._typeReference_ == oldChild) {
			setTypeReference((PTypeReference) newChild);
			return;
		}

		if (this._rPar_ == oldChild) {
			setRPar((TRPar) newChild);
			return;
		}

		if (this._term_ == oldChild) {
			setTerm((PTerm) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
