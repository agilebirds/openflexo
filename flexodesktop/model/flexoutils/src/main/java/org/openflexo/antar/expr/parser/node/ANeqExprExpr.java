/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.antar.expr.parser.node;

import org.openflexo.antar.expr.parser.analysis.Analysis;

@SuppressWarnings("nls")
public final class ANeqExprExpr extends PExpr {
	private PExpr _left_;
	private TNeq _neq_;
	private PExpr2 _right_;

	public ANeqExprExpr() {
		// Constructor
	}

	public ANeqExprExpr(@SuppressWarnings("hiding") PExpr _left_, @SuppressWarnings("hiding") TNeq _neq_,
			@SuppressWarnings("hiding") PExpr2 _right_) {
		// Constructor
		setLeft(_left_);

		setNeq(_neq_);

		setRight(_right_);

	}

	@Override
	public Object clone() {
		return new ANeqExprExpr(cloneNode(this._left_), cloneNode(this._neq_), cloneNode(this._right_));
	}

	@Override
	public void apply(Switch sw) {
		((Analysis) sw).caseANeqExprExpr(this);
	}

	public PExpr getLeft() {
		return this._left_;
	}

	public void setLeft(PExpr node) {
		if (this._left_ != null) {
			this._left_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._left_ = node;
	}

	public TNeq getNeq() {
		return this._neq_;
	}

	public void setNeq(TNeq node) {
		if (this._neq_ != null) {
			this._neq_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._neq_ = node;
	}

	public PExpr2 getRight() {
		return this._right_;
	}

	public void setRight(PExpr2 node) {
		if (this._right_ != null) {
			this._right_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._right_ = node;
	}

	@Override
	public String toString() {
		return "" + toString(this._left_) + toString(this._neq_) + toString(this._right_);
	}

	@Override
	void removeChild(@SuppressWarnings("unused") Node child) {
		// Remove child
		if (this._left_ == child) {
			this._left_ = null;
			return;
		}

		if (this._neq_ == child) {
			this._neq_ = null;
			return;
		}

		if (this._right_ == child) {
			this._right_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	@Override
	void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild) {
		// Replace child
		if (this._left_ == oldChild) {
			setLeft((PExpr) newChild);
			return;
		}

		if (this._neq_ == oldChild) {
			setNeq((TNeq) newChild);
			return;
		}

		if (this._right_ == oldChild) {
			setRight((PExpr2) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
